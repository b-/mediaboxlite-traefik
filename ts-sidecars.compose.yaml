x-ts-sidecar: &ts-sidecar
  # volumes:
  #   - ts_state:/ts_state
  image: tailscale/tailscale:latest
  environment: &ts-env
    TS_AUTHKEY: ${TS_AUTHKEY}
    TS_EXTRA_ARGS: "--advertise-tags=tag:docker"
    #TS_USERSPACE: false
    TS_ENABLE_HEALTH_CHECK: true
    TS_LOCAL_ADDR_PORT: 127.0.0.1:41234
    TS_STATE: "mem:"
    #TS_SERVE_CONFIG: /config/serve.json
    #TS_AUTHKEY: tskey-auth-kS5WUC4XYe11CNTRL-AT7DucG3DnhrX8j6rmPdhhcuN2mRerBk
    #TS_HOSTNAME: generic-sidecar
  #    ports:
  #      - "8120"
  #    devices:
  #      - /dev/net/tun:/dev/net/tun # Network configuration for Tailscale to work
  #    cap_add:
  #      - net_admin # Tailscale requirement
  #      - sys_module # Tailscale requirement
  healthcheck:
    test: ["CMD", "wget", "--spider", "-q", "http://127.0.0.1:41234/healthz"] # Check Tailscale has a Tailnet IP and is operational
    interval: 1m # How often to perform the check
    timeout: 10s # Time to wait for the check to succeed
    retries: 3 # Number of retries before marking as unhealthy
    start_period: 10s # Time to wait before starting health checks
  restart: always
services:
  traefik-ts:
    <<: *ts-sidecar
    environment:
      <<: *ts-env
      TS_HOSTNAME: "traefik-internal"
    extra_hosts:
      - host.docker.internal=host-gateway
    ports:
      - 80:80
      - 8081:8080
      - 443:443
      - 222:222
  traefik:
    network_mode: service:traefik-ts
    networks: !reset null
    ports: !reset null
    extra_hosts: !reset null
  traefik-internal-redis-ts:
    <<: *ts-sidecar
    environment:
      <<: *ts-env
      TS_HOSTNAME: "traefik-internal-redis"
  traefik-internal-redis:
    network_mode: service:traefik-internal-redis-ts
    networks: !reset null
  logdy-ts:
    <<: *ts-sidecar
    ports:
    - "8333:8080"
    environment:
      <<: *ts-env
      TS_HOSTNAME: "logdy-traefik-internal"
    labels:
      - traefik.enable=true
      - "traefik.http.routers.${TS_HOSTNAME}.rule=${TRAEFIK_RULE_PREFIX}${TS_HOSTNAME}${TRAEFIK_RULE_SUFFIX}"
      - traefik.http.services.${TS_HOSTNAME}.loadbalancer.server.port=8080
  logdy:
    network_mode: service:logdy-ts
    networks: !reset null
    labels: ["traefik.enable=false"]

  whoami-ts:
    <<: *ts-sidecar
    #ports:
    #- "80:80"
    labels:
      - traefik.enable=true
      - "traefik.http.routers.${TS_HOSTNAME}.rule=${TRAEFIK_RULE_PREFIX}${TS_HOSTNAME}${TRAEFIK_RULE_SUFFIX}"
      - traefik.http.services.${TS_HOSTNAME}.loadbalancer.server.port=80
    environment:
      <<: *ts-env
      TS_HOSTNAME: "whoami"
  whoami:
    network_mode: service:whoami-ts
    labels: ["traefik.enable=false"]
    ports: !reset null
    extra_hosts: !reset null
    networks: !reset null
